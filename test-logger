#!/usr/bin/env bash

set -e

. functions

SELECTOR=app.kubernetes.io/name=test-logger,app.kubernetes.io/instance

function usage {
    cat <<END
Manage test loggers.

Usage:
  $0 [<options>] start [<namespace>/]<name> [<run arg> ...]
  $0 [<options>] list|send|logs|stop [[<namespace>/]<name> ...]

Options:
  --labels, -l
    Labels to add on logger pods
  --annotations, -a
    Annotations to add on logger pods
  --help, -h
    Display this help
END
    exit 2
}

declare -A CMD=()

declare -A ENTRY=()

function set_entry {
    local namespace= name=$1

    if [[ $name == */* ]]; then
        namespace=${name%%/*}
        name=${name:${#namespace}+1}
    fi

    valid_identifier "$name" || error "Invalid name identifier: $name"
    [[ ! $namespace ]] || valid_identifier "$namespace" || error "Invalid namespace identifier: $namespace"

    ENTRY=([namespace]=$namespace [name]=$name)
}

function kubectl_entry {
    kubectl -n "${ENTRY[namespace]}" -l "$SELECTOR=${ENTRY[name]}" "$@"
}

require_command jq

labels=()
annotations=()

while [[ $# -gt 0 ]]; do
case $1 in
--labels | -l)
    array_push labels "$2"
    shift 2 || usage
    ;;
--annotations | -a)
    array_push annotations "$2"
    shift 2 || usage
    ;;
--help | -h)
    usage
    ;;
--)
    shift
    break
    ;;
-*)
    error "Unknown option: $1"
    ;;
*)
    break
    ;;
esac
done

CMD[start]=_; __start() {
    local namespace
    namespace=$(kubectl_entry get po -o jsonpath={.items[*].metadata.namespace} | head)

    [[ $namespace ]] && error "Test logger exists: $namespace/${ENTRY[name]}"

    kubectl_entry run test-logger-${ENTRY[name]} --quiet --image bash "$@" \
        --labels=$(list_join , "${labels[@]}" "$SELECTOR=${ENTRY[name]}") \
        --annotations=$(list_join , "${annotations[@]}") \
        -- bash -c 'tail -q -F test.log 2> /dev/null' >/dev/null
}

CMD[list]=_; __list() {
    echo "${ENTRY[namespace]}/${ENTRY[name]}"
}

CMD[send]=_; __send() {
    if [[ ! ${CMD[send_read]} ]]; then
        CMD[send_read]=_
        CMD[send_data]=$(cat)
    fi

    local pod
    for pod in $(kubectl_entry get po -o name | xargs -r basename -a); do
        <<< "${CMD[send_data]}" kubectl exec -i -n "${ENTRY[namespace]}" $pod -- bash -c 'cat >> test.log'
    done
}

CMD[logs]=_; __logs() {
    kubectl_entry logs --tail=-1
}

CMD[stop]=_; __stop() {
    kubectl_entry delete po --grace-period 1 >/dev/null
}

cmd=$1
shift && [[ $cmd ]] || usage

[[ ${CMD[$cmd]} ]] || usage

if [[ $cmd == start ]]; then
    entries=("$1")
    shift || usage
else
    data=$(kubectl get -A po -l "$SELECTOR" -o json)

    entries=($(<<< "$data" jq -r '.items[].metadata | [.namespace, .labels["app.kubernetes.io/instance"]] | join("/")'))

    if [[ $# -gt 0 ]]; then
        declare -A selected=()

        while [[ $# -gt 0 ]]; do
            selector=$1 && shift

            found=
            for entry in "${entries[@]}"; do
                set_entry "$entry"

                [[ $selector == ${ENTRY[namespace]}/${ENTRY[name]} ]] || \
                [[ $selector == ${ENTRY[namespace]}/ ]] || \
                [[ $selector == ${ENTRY[name]} ]] || \
                continue

                selected[$entry]=_

                found=_
            done
            [[ $found ]] || error "No test logger matching: $selector"
        done

        filter() { [[ ${selected[$1]} ]]; }; array_filter entries +@ filter
    fi
fi

for entry in "${entries[@]}"; do
    set_entry "$entry"

    __$cmd "$@"
done
