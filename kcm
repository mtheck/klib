#!/usr/bin/env bash

set -e

. functions

export KCM_DEBUG=${KCM_DEBUG:-false}
export KCM_DRYRUN=${KCM_DRYRUN:-false}

export KCM_ROOT=${KCM_ROOT:-~/.kube/.kcm}

export KCM_NAMESPACE=${KCM_NAMESPACE:-default}

BASE_FIELDS=(
    provider
    location
    client
    type
    stage
    name
)

declare -A KCM_ENV=()

declare -A CLUSTER=()
declare -a CLUSTERS=()

declare -A TARGET_CLUSTER=()

INCLUDE_PROVIDERS=()
EXCLUDE_PROVIDERS=()
INCLUDE_TYPES=()
EXCLUDE_TYPES=()
INCLUDE_CLIENTS=()
EXCLUDE_CLIENTS=()
INCLUDE_STAGES=()
EXCLUDE_STAGES=()

declare -A CLUSTER_DATA=()

function usage {
    cat <<END
Manage configuration of Kubenetes clusters.

Usage:
  $0 get|ls|meta|rm [<options>] [<cluster> ...]
  $0 run [<options>] [- <cluster> ... -] <command> [<arg> ...]
  $0 env <cluster>|-
  $0 complete

Commands:
  get
    Fetch and install configuration for selected clusters
  ls
    List configured selected clusters
  meta
    Output meta data for configured selected clusters
  rm
    Remove configuration of selected clusters
  run
    Run a command for each selected cluster
  env
    Output sourceable environment for specified cluster (use - to unset)
  complete
    Output completion and utility functions:
      kcx [<cluster>|-|_]
        Set context to specified cluster, set to previous cluster, display current, or unset if no argument
      kcn [<namespace>|-|_]
        Set current context to specified namespace, set to previous namespace, display current, or set to default if no argument (KCN_DEFAULT=${KCN_DEFAULT:-default})

Options:
  --kcm-provider, -K <LIST:STRING>
    List of providers implementing cluster operations (KCM_PROVIDER=$KCM_PROVIDER)
  --namespace, -N <IDENTIFIER>
    Configuration namespace (KCM_NAMESPACE=$KCM_NAMESPACE)
  --provider, -p <LIST:IDENTIFIER>
    List of selected cluster provider
  --no-provider, -P <LIST:IDENTIFIER>
    List of excluded cluster provider
  --type, -t <LIST:IDENTIFIER>
    List of selected cluster platform type
  --no-type, -T <LIST:IDENTIFIER>
    List of excluded cluster platform type
  --client, -c <LIST:IDENTIFIER>
    List of selected client title
  --no-client, -C <LIST:IDENTIFIER>
    List of excluded client title
  --stage, -s <LIST:IDENTIFIER>
    List of selected cluster stage
  --no-stage, -S <LIST:IDENTIFIER>
    List of excluded cluster stage
  --parallel, -j
    Use parallel jobs with run
  --ignore, -i
    Ignore command error on run
  --force, -f
    Force updating configuration even if cluster is reachable
  --keep, -k
    Keep configuration of inaccessible clusters on get
  --quiet, -q
    Disable progression messages
  --verbose, -v
    Enable debugging messages
  --dry-run, -n
    Do not make any change on the configurations
  --help, -h
    Display this help
END
    exit 2
}

function dryrun {
    bool "$KCM_DRYRUN"
}

function cluster_selected {
    list_selects "${CLUSTER[provider]}" "${INCLUDE_PROVIDERS[@]}" || return 1
    list_contains "${CLUSTER[provider]}" "${EXCLUDE_PROVIDERS[@]}" && return 1

    list_selects "${CLUSTER[type]}" "${INCLUDE_TYPES[@]}" || return 1
    list_contains "${CLUSTER[type]}" "${EXCLUDE_TYPES[@]}" && return 1

    list_selects "${CLUSTER[client]}" "${INCLUDE_CLIENTS[@]}" || return 1
    list_contains "${CLUSTER[client]}" "${EXCLUDE_CLIENTS[@]}" && return 1

    list_selects "${CLUSTER[stage]}" "${INCLUDE_STAGES[@]}" || return 1
    list_contains "${CLUSTER[stage]}" "${EXCLUDE_STAGES[@]}" && return 1

    return 0
}

function filtering_clusters {
    for len in \
        ${#INCLUDE_PROVIDERS[@]} \
        ${#EXCLUDE_PROVIDERS[@]} \
        ${#INCLUDE_TYPES[@]} \
        ${#EXCLUDE_TYPES[@]} \
        ${#INCLUDE_CLIENTS[@]} \
        ${#EXCLUDE_CLIENTS[@]} \
        ${#INCLUDE_STAGES[@]} \
        ${#EXCLUDE_STAGES[@]}
    do
        [[ $len -gt 0 ]] && return 0
    done
    return 1
}

function defined_cluster {
    local cluster=$1

    [[ -e $KCM_ROOT/$cluster/config ]]
}

function list_clusters {
    find "$KCM_ROOT" -mindepth 1 -maxdepth 1 -type d -not -name '.*' -exec basename {} \; | sort
}

function load_data {
    local json=$1 field fields=()

    CLUSTER=()

    jq -e 'type == "object"' <<< "$json" >/dev/null || error "Invalid cluster data: $json"

    readarray -t fields < <(jq -r keys[] <<< "$json")

    for field in "${fields[@]}"; do
        valid_name "$field" || error "Invalid name for cluster field: $field"

        CLUSTER[$field]=$(jq -r .$field <<< "$json")
    done

    for field in "${BASE_FIELDS[@]}"; do
        [[ ${CLUSTER[$field]} ]] || error "Missing value for cluster $field: ${CLUSTER[$field]}"

        valid_identifier "${CLUSTER[$field]}" || error "Invalid identifier for cluster $field: ${CLUSTER[$field]}"
    done

    for field in type stage; do
        [[ ${CLUSTER[$field]} == *-* ]] && error "Hyphen not allowed for cluster $field: ${CLUSTER[$field]}"
    done

    CLUSTER[_]=${CLUSTER[client]}-${CLUSTER[type]}-${CLUSTER[stage]}_${CLUSTER[provider]}_${CLUSTER[location]}_${CLUSTER[name]}
}

function build_meta {
    local field field_list field_args=()

    for field in "${!CLUSTER[@]}"; do
        field_list+="$field:\$$field,"
        field_args+=(--arg $field "${CLUSTER[$field]}")
    done

    jq -n -S "{$field_list}" "${field_args[@]}"
}

function save_meta {
    local meta_file=$KCM_ROOT/${CLUSTER[_]}/meta.json

    build_meta > "$meta_file"
}

function load_meta {
    local cluster=$1

    coproc_run load_meta jq --unbuffered -r 'to_entries | length, (map(.key, (.value | tostring)) | map((length | tostring), .))[]'

    local data=${CLUSTER_DATA[$cluster]}

    debug "Loading meta data for cluster: $cluster"

    if [[ ! $data ]]; then
        trace "Reading meta data file"

        local meta_file=$KCM_ROOT/$cluster/meta.json

        [[ -e $meta_file ]] || error "Cluster meta data file not found"

        IFS= read -r -d '' data < "$meta_file" || :

        [[ $data ]] || error "Failed loading cluster meta data file"

        CLUSTER_DATA[$cluster]=$data
    fi

    coproc_write load_meta "$data" $'\n'

    CLUSTER=()

    local field_count field_name field_value

    coproc_read_line load_meta; field_count=$COPROC_DATA

    for ((i=0; i<$field_count; i++)); do
        coproc_read_field load_meta; field_name=$COPROC_DATA

        valid_name "$field_name" || error "Invalid name for meta data field: $field_name"

        coproc_read_field load_meta; field_value=$COPROC_DATA

        CLUSTER[$field_name]=$field_value
    done

    [[ ${CLUSTER[_]} == "$cluster" ]] || error "Invalid meta data key for cluster: $cluster"
}

function check_meta {
    local cluster=$1

    [[ "${CLUSTER_DATA[$cluster]}" ]] || load_meta "$cluster"
}

function set_env {
    KCM_ENV[$1]=$2
    export "$1=$2"
}

function load_env {
    KCM_ENV=()

    set_env KCM_CLUSTER "${CLUSTER[_]}"

    for field in "${!CLUSTER[@]}"; do
        [[ $field == _ ]] && continue

        set_env KCM_CLUSTER_${field^^} "${CLUSTER[$field]}"
    done

    set_env KUBECONFIG "$KCM_ROOT"/${CLUSTER[_]}/config
}

function unload_env {
    unset ${!KCM_ENV[@]}
}

function export_list {
    local var=$1 && shift
    local IFS=,

    export "$var=$*"
}

function check_cluster {
    kubectl version &>/dev/null
}

function run_cluster {
    msg "Cluster: ${CLUSTER[_]}"

    run "$@"
}

function run_cluster_bg {
    local dir=$1 && shift

    set +e

    { echo ${CLUSTER[_]} > "$dir"/cluster; } 2>/dev/null

    { run_cluster "$@" 1> "$dir"/out 2> "$dir"/err; } 2>/dev/null

    { echo $? > "$dir"/rc; } 2>/dev/null

    rm -f "$dir"/run
}

function provider_call {
    local op=$1 && shift

    local fct=kcm_$op

    declare -F $fct >/dev/null || error "Provider operation not defined: $op"

    $fct "$@"
}

##
# Completion and utility functions
##

function kcx {
    [[ $# -le 1 ]] || return $(errorf)

    local current_cluster=$KCM_CLUSTER

    if [[ $# -eq 0 ]]; then
        KCX_PREV=$current_cluster

        . <(kcm env -)

        return
    fi

    local cluster=$1

    if [[ $cluster == _ ]]; then
        [[ $current_cluster ]] && echo $current_cluster

        return 0
    fi

    if [[ $cluster == - ]]; then
        cluster=$KCX_PREV

        [[ $cluster ]] && kcm ls "$cluster" &>/dev/null || return 0
    fi

    KCX_PREV=$current_cluster

    . <(kcm env "$cluster")

    [[ $(kcn _) ]] || kcn
}

function __kcx {
    [[ $COMP_CWORD -eq 1 ]] || return

    COMPREPLY=($(compgen -W "$(kcm ls)" -- "$2"))
}

function kcn {
    [[ $# -le 1 ]] || return $(errorf)

    local namespace=$1

    if [[ $# -eq 0 ]]; then
        namespace=${KCN_DEFAULT:-default}
    fi

    local current_namespace=$(kubectl config get-contexts "$(kubectl config current-context)" --no-headers | awk '{print $5}')

    if [[ $namespace == _ ]]; then
        [[ $current_namespace ]] && echo $current_namespace

        return 0
    fi

    if [[ $namespace == - ]]; then
        namespace=$KCN_PREV

        [[ $namespace ]] || return 0
    fi

    KCN_PREV=$current_namespace

    kubectl config set-context --current --namespace "$namespace" >/dev/null
}

function __kcn {
    [[ $COMP_CWORD -eq 1 ]] || return

    COMPREPLY=($(compgen -W "$(kubectl get namespaces -o name | xargs basename -a)" -- "$2"))
}

command=$1
shift && [[ $command != -* ]] || usage

[[ $command == exec ]] && command=run

providers=()
parallel=
ignore=
force=
keep=

while [[ $# -gt 0 ]]; do
case $1 in
--kcm-provider | -K)
    array_push providers "$2"
    shift 2 || usage
    ;;
--namespace | -N)
    KCM_NAMESPACE=$2
    shift 2 || usage
    ;;
--provider | -p)
    array_push INCLUDE_PROVIDERS "$2"
    shift 2 || usage
    ;;
--no-provider | -P)
    array_push EXCLUDE_PROVIDERS "$2"
    shift 2 || usage
    ;;
--type | -t)
    array_push INCLUDE_TYPES "$2"
    shift 2 || usage
    ;;
--no-type | -T)
    array_push EXCLUDE_TYPES "$2"
    shift 2 || usage
    ;;
--client | -c)
    array_push INCLUDE_CLIENTS "$2"
    shift 2 || usage
    ;;
--no-client | -C)
    array_push EXCLUDE_CLIENTS "$2"
    shift 2 || usage
    ;;
--stage | -s)
    array_push INCLUDE_STAGES "$2"
    shift 2 || usage
    ;;
--no-stage | -S)
    array_push EXCLUDE_STAGES "$2"
    shift 2 || usage
    ;;
--parallel | -j)
    parallel=parallel
    shift
    ;;
--ignore | -i)
    ignore=ignore
    shift
    ;;
--force | -f)
    force=force
    shift
    ;;
--keep | -k)
    keep=keep
    shift
    ;;
--quiet | -q)
    export LOG_LEVEL=$(_error_)
    shift
    ;;
--verbose | -v)
    KCM_DEBUG=true
    export LOG_LEVEL=$(_debug_)
    shift
    ;;
--dry-run | -n)
    KCM_DRYRUN=true
    shift
    ;;
--help | -h)
    usage
    ;;
--)
    shift
    break
    ;;
-?*)
    error "Unknown option: $1"
    ;;
*)
    break
    ;;
esac
done

valid_identifier "$KCM_NAMESPACE" || error "Illegal identifier for namespace: $KCM_NAMESPACE"

require_command jq

KCM_ROOT+=/$KCM_NAMESPACE

mkdir -p "$KCM_ROOT"

ARGS=()

## extract run args

if [[ $command == run ]]; then
    if [[ $1 == - ]]; then
        shift
        for ((n=1; n<=$#; n++)); do
            if [[ ${!n} == - ]]; then
                ARGS=("${@:$n+1}")
                set -- "${@:1:$n-1}"
                break
            fi
        done
    else
        ARGS=("$@")
        set --
    fi
fi

## completion and utility functions output

if [[ $command == complete ]]; then
    for cmd in kcx kcn; do
        if is_function $cmd; then
            declare -f $cmd
        fi
        declare -f __$cmd
        echo complete -F __$cmd $cmd
    done

    exit 0 # complete
fi

## cluster env output

if [[ $command == env ]]; then
    cluster=$1
    shift || usage

    [[ $# -eq 0 ]] || error "Unexpected argument: $1"

    if [[ $cluster != - ]]; then
        defined_cluster "$cluster" || error "Config not defined for cluster: $cluster"
    fi

    if [[ $KCM_CLUSTER ]] && defined_cluster "$KCM_CLUSTER"; then
        load_meta "$KCM_CLUSTER"
        load_env

        echo unset ${!KCM_ENV[@]}
    fi

    if [[ $cluster != - ]]; then
        load_meta "$cluster"
        load_env

        for var in "${!KCM_ENV[@]}"; do
            echo export "$var=$(quote "${KCM_ENV[$var]}")"
        done
    fi

    exit 0 # env
fi

## load clusters

for cluster in "$@"; do
    TARGET_CLUSTER[$cluster]=$cluster
done

filtering=
filtering_clusters && filtering=filtering

while read -r cluster; do
    [[ ${#TARGET_CLUSTER[@]} -eq 0 || ${TARGET_CLUSTER[$cluster]} ]] || continue

    if [[ $filtering ]]; then
        load_meta "$cluster"

        cluster_selected || continue
    fi

    CLUSTERS+=("$cluster")
done < <(
    list_clusters
)

if [[ $command != get ]]; then
    for target_cluster in "${!TARGET_CLUSTER[@]}"; do
        list_contains "$target_cluster" "${CLUSTERS[@]}" || error "Cluster not found: $target_cluster"
    done
fi

## list configured clusters

if [[ $command == ls ]]; then
    for cluster in "${CLUSTERS[@]}"; do
        echo "$cluster"
    done

    exit 0 # ls
fi

## output configured clusters meta data

if [[ $command == meta ]]; then
    for cluster in "${CLUSTERS[@]}"; do
        check_meta "$cluster"
    done

    for cluster in "${CLUSTERS[@]}"; do
        echo "${CLUSTER_DATA[$cluster]}"
    done \
        | jq -s -c -M

    exit 0 # meta
fi

## run command for clusters

if [[ $command == run ]]; then
    [[ ${#ARGS} -gt 0 ]] || usage

    job_dirs=()

    for cluster in "${CLUSTERS[@]}"; do
        load_meta "$cluster"
        load_env

        if [[ $parallel ]]; then
            tmp_dir; job_dir=$TMP_DIR

            touch "$job_dir"/run

            run_job run_cluster_bg "$job_dir" "${ARGS[@]}"

            job_dirs+=("$job_dir")
        else
            [[ $ignore ]] && set +e

            run_cluster "${ARGS[@]}"

            [[ $ignore ]] && set -e
        fi
    done

    if [[ $parallel ]]; then
        while :; do
            for ((i=0; i<${#job_dirs[@]}; i++)); do
                job_dir=${job_dirs[$i]}

                [[ -e "$job_dir"/run ]] && continue

                _debug && debug "Fihished running job: $(< "$job_dir"/cluster) [$(< "$job_dir"/rc)]"

                cat "$job_dir"/err >&2

                if [[ ! $ignore ]]; then
                    read -r job_rc < "$job_dir"/rc

                    [[ $job_rc -eq 0 ]] || exit $job_rc
                fi

                cat "$job_dir"/out >&1

                job_dirs=("${job_dirs[@]:0:i}" "${job_dirs[@]:i+1}")

                i=$((i-1))
            done

            [[ ${#job_dirs[@]} -eq 0 ]] && break

            _trace && trace "Running jobs: ${#job_dirs[@]}"

            sleep .1
        done
    fi

    exit 0 # run
fi

## remove configured clusters

if [[ $command == rm ]]; then
    for cluster in "${CLUSTERS[@]}"; do
        msg "Removing cluster: $cluster"

        if ! dryrun; then
            rm -rf "$KCM_ROOT"/$cluster
        fi
    done

    exit 0 # rm
fi

## get clusters configuration

[[ $command == get ]] || error "Invalid command: $command"

if [[ ${#providers[@]} -eq 0 ]]; then
    [[ $KCM_PROVIDER ]] || error "No cluster operations implementation provider defined in environment"

    array_push providers "$KCM_PROVIDER"
fi

export_list KCM_PROVIDER_INCLUDE_PROVIDERS "${INCLUDE_PROVIDERS[@]}"
export_list KCM_PROVIDER_EXCLUDE_PROVIDERS "${EXCLUDE_PROVIDERS[@]}"
export_list KCM_PROVIDER_INCLUDE_TYPES "${INCLUDE_TYPES[@]}"
export_list KCM_PROVIDER_EXCLUDE_TYPES "${EXCLUDE_TYPES[@]}"
export_list KCM_PROVIDER_INCLUDE_CLIENTS "${INCLUDE_CLIENTS[@]}"
export_list KCM_PROVIDER_EXCLUDE_CLIENTS "${EXCLUDE_CLIENTS[@]}"
export_list KCM_PROVIDER_INCLUDE_STAGES "${INCLUDE_STAGES[@]}"
export_list KCM_PROVIDER_EXCLUDE_STAGES "${EXCLUDE_STAGES[@]}"

cluster_list=

for provider in "${providers[@]}"; do
    is_command "$provider" || error "Cluster provider command not found: $provider"

    set +e -o pipefail

    cluster_list+=$(
        set -e

        debug "Loading provider: $provider"

        . $provider

        debug "Fetching clusters data"

        provider_call fetch | while IFS= read -r data; do
            debug "Processing cluster data entry:" "$data"

            load_data "$data"

            [[ ${#TARGET_CLUSTER[@]} -eq 0 || ${TARGET_CLUSTER[${CLUSTER[_]}]} ]] || continue

            cluster_selected || continue

            msg "Configuring cluster:" @green@ "${CLUSTER[_]}"

            load_env

            if [[ ! $force ]] && list_contains "${CLUSTER[_]}" "${CLUSTERS[@]}" && check_cluster; then
                debug "Skipping config for reachable cluster: ${CLUSTER[_]}"
            else
                config=$(provider_call config)

                if ! dryrun && [[ $config ]]; then
                    mkdir -p "$(dirname "$KUBECONFIG")"

                    echo "$config" > "$KUBECONFIG"

                    chmod 600 "$KUBECONFIG"

                    save_meta
                fi
            fi

            unload_env

            echo "${CLUSTER[_]}"
        done
    )

    rc=$?

    set -e +o pipefail

    [[ $rc -eq 0 ]] || error "Failed processing clusters with provider: $provider"

    cluster_list+=$'\n'
done

readarray -t get_clusters < <(echo -n "${cluster_list%$'\n'}")

declare -A get_cluster=()
for cluster in "${get_clusters[@]}"; do
    [[ ${get_cluster[$cluster]} ]] && error "Duplicate identity returned for cluster: $cluster"
    get_cluster[$cluster]=_
done

for target_cluster in "${!TARGET_CLUSTER[@]}"; do
    [[ ${get_cluster[$target_cluster]} ]] || error "Cluster not found: $target_cluster"
done

[[ $keep ]] && exit

for cluster in "${CLUSTERS[@]}"; do
    [[ ${get_cluster[$cluster]} ]] && continue

    note "Flushing config for obsolete cluster: $cluster"

    if ! dryrun; then
        rm -rf "$KCM_ROOT"/$cluster
    fi
done
